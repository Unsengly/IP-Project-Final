{"ast":null,"code":"import axios from \"axios\";\nimport { getAccessToken, getRefreshToken, logout, setAccessToken, setRefreshToken } from \"./service\";\nimport { message } from \"antd\";\nconst base_url = \"http://localhost:8085/api/\";\nexport const request = (url = \"\", method = \"get\", data = {}, new_access_token = null) => {\n  var queryParam = \"\";\n  if (method === \"get\" && Object.keys(data).length > 0) {\n    Object.keys(data).map((key, index) => {\n      queryParam += (index === 0 ? \"?\" : \"&\") + key + \"=\" + data[key];\n    });\n  }\n  var access_token = getAccessToken();\n  if (new_access_token) {\n    access_token = new_access_token;\n  }\n  var headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (data instanceof FormData) {\n    // check if param data is FormData\n    headers = {\n      \"Content-Type\": \"multipart/form-data\"\n    };\n  }\n  return axios({\n    url: base_url + url + queryParam,\n    method: method,\n    data: data,\n    headers: {\n      ...headers,\n      Authorization: \"Bearer \" + access_token\n    }\n  }).then(res => {\n    return res.data;\n  }).catch(error => {\n    console.log(error);\n    var response = error.response;\n    if (error.code === \"ERR_NETWORK\") {\n      message.error(\"App under maintenance.\");\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 401) {\n      var _response$data, _response$data$error, _response$data2;\n      // \"Unauthorized\"\n      // access_token == null || access_token == \"expired\"  access_token == \"incorrect\"\n      if ((response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$error = _response$data.error) === null || _response$data$error === void 0 ? void 0 : _response$data$error.name) === \"TokenExpiredError\") {\n        // logout(); // case we want logout when access_token expired\n        // refrehs token\n        console.log(\"Has call refresh token\");\n        const refesh_token = getRefreshToken();\n        return axios({\n          url: base_url + \"users/refresh_token\",\n          method: \"post\",\n          data: {\n            refres_token: refesh_token\n          }\n        }).then(res => {\n          var _res$data, _res$data2, _res$data3;\n          setAccessToken(res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.access_token);\n          setRefreshToken(res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.refresh_token);\n          var new_access_token_ofter_resfresh = res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.access_token;\n          return request(url, method, data, new_access_token_ofter_resfresh);\n        }).catch(error1 => {\n          logout(); //when try refresh not success then logout\n        });\n      } else if (response !== null && response !== void 0 && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.error) {\n        logout();\n      }\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 404) {\n      message.error(\"Error 404. Rout not found!\");\n    } else if ((response === null || response === void 0 ? void 0 : response.status) === 500) {\n      message.error(\"Error 500. Internal error server!\");\n    }\n    return false;\n  });\n};","map":{"version":3,"names":["axios","getAccessToken","getRefreshToken","logout","setAccessToken","setRefreshToken","message","base_url","request","url","method","data","new_access_token","queryParam","Object","keys","length","map","key","index","access_token","headers","FormData","Authorization","then","res","catch","error","console","log","response","code","status","_response$data","_response$data$error","_response$data2","name","refesh_token","refres_token","_res$data","_res$data2","_res$data3","refresh_token","new_access_token_ofter_resfresh","error1"],"sources":["C:/Users/Techo/OneDrive/Documents/I4S2-GIC/Internet_Programming/SerkSa/IP-Project-Final/web_react/src/util/request.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { getAccessToken, getRefreshToken, logout, setAccessToken, setRefreshToken } from \"./service\";\r\nimport { message } from \"antd\";\r\n\r\nconst base_url = \"http://localhost:8085/api/\";\r\nexport const request = (url = \"\", method = \"get\", data = {}, new_access_token = null) => {\r\n  var queryParam = \"\";\r\n  if (method === \"get\" && Object.keys(data).length > 0) {\r\n    Object.keys(data).map((key, index) => {\r\n      queryParam += (index === 0 ? \"?\" : \"&\") + key + \"=\" + data[key];\r\n    });\r\n  }\r\n  var access_token = getAccessToken();\r\n  if (new_access_token) {\r\n    access_token = new_access_token;\r\n  }\r\n  var headers = { \"Content-Type\": \"application/json\" };\r\n  if (data instanceof FormData) {\r\n    // check if param data is FormData\r\n    headers = { \"Content-Type\": \"multipart/form-data\" };\r\n  }\r\n\r\n  return axios({\r\n    url: base_url + url + queryParam,\r\n    method: method,\r\n    data: data,\r\n    headers: {\r\n      ...headers,\r\n      Authorization: \"Bearer \" + access_token,\r\n    },\r\n  })\r\n    .then((res) => {\r\n      return res.data;\r\n    })\r\n    .catch((error) => {\r\n      console.log(error);\r\n      var response = error.response;\r\n      if (error.code === \"ERR_NETWORK\") {\r\n        message.error(\"App under maintenance.\");\r\n      } else if (response?.status === 401) {\r\n        // \"Unauthorized\"\r\n        // access_token == null || access_token == \"expired\"  access_token == \"incorrect\"\r\n        if (response?.data?.error?.name === \"TokenExpiredError\") {\r\n          // logout(); // case we want logout when access_token expired\r\n          // refrehs token\r\n          console.log(\"Has call refresh token\");\r\n          const refesh_token = getRefreshToken();\r\n          return axios({\r\n            url: base_url + \"users/refresh_token\",\r\n            method: \"post\",\r\n            data: {\r\n              refres_token: refesh_token,\r\n            },\r\n          })\r\n            .then((res) => {\r\n              setAccessToken(res?.data?.access_token);\r\n              setRefreshToken(res?.data?.refresh_token);\r\n              var new_access_token_ofter_resfresh = res?.data?.access_token;\r\n              return request(url, method, data, new_access_token_ofter_resfresh);\r\n            })\r\n            .catch((error1) => {\r\n              logout(); //when try refresh not success then logout\r\n            });\r\n        } else if (response?.data?.error) {\r\n          logout();\r\n        }\r\n      } else if (response?.status === 404) {\r\n        message.error(\"Error 404. Rout not found!\");\r\n      } else if (response?.status === 500) {\r\n        message.error(\"Error 500. Internal error server!\");\r\n      }\r\n      return false;\r\n    });\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}